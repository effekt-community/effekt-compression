module src/test

import test
import src/lib
import src/utils/ascii_dictionary
import src/utils/huffman_tree
import src/utils/circular_array
import src/utils/lzss

def main() = mainSuite("lib") {
  test("AsciiDictionaryInt_Init") {
    var map = emptyDict[Int]()

    val (keys, size) = map.keys()
    assert(size, 0)

    map.update('a'.toInt.toByte, Some(1))
    map.update('c'.toInt.toByte, Some(3))

    val (keys, size) = map.keys()
    assert(size, 2)
  }

  test("AsciiDictionaryString_Get") {
    with on[MissingValue].default { assertTrue(false, "missing value") }

    var map = emptyDict[String]()
    map.update('a'.toInt.toByte, Some("0101"))
    map.update('c'.toInt.toByte, Some("1100"))

    assert(map.get('a'.toInt.toByte).value, "0101")
    assert(map.get('c'.toInt.toByte).value, "1100")
  }

  test("HuffmanTree_Serialize") {
    val tree = Node(11, Leaf('w'.toInt.toByte, 5), Node(6, Leaf('a'.toInt.toByte, 3), Node(3, Leaf('e'.toInt.toByte, 1), Leaf('x'.toInt.toByte, 2))))
    val serialized_tree = huffman_serialize(tree)
    assert(serialized_tree, "01|119|01|97|01|101|1|120|")
  }

  test("HuffmanTree_Deserialize_Serialize") {
    val serialized_tree = "01|119|01|97|01|101|1|120|"
    val deserialized_tree = huffman_deserialize(serialized_tree)
    val tree = Node(0, Leaf('w'.toInt.toByte, 0), Node(0, Leaf('a'.toInt.toByte, 0), Node(0, Leaf('e'.toInt.toByte, 0), Leaf('x'.toInt.toByte, 0))))
    assert(serialized_tree, huffman_serialize(tree))
  }

  test("CircularArray_Append") {
    with on[OutOfBounds].report
    val buffer = circular_array[Int](5)
    assert(buffer.elementCount.get(), 0)

    buffer.append(1)
    assert(buffer.elementCount.get(), 1)

    buffer.append(2)
    assert(buffer.elementCount.get(), 2)

    buffer.append(3)
    assert(buffer.elementCount.get(), 3)

    buffer.append(4)
    assert(buffer.elementCount.get(), 4)

    buffer.append(5)
    assert(buffer.elementCount.get(), 5)

    assert(buffer.get(0), 1)
    assert(buffer.get(1), 2)
    assert(buffer.get(2), 3)
    assert(buffer.get(3), 4)
    assert(buffer.get(4), 5)

    buffer.append(6)
    assert(buffer.get(0), 2)
    assert(buffer.get(1), 3)
    assert(buffer.get(2), 4)
    assert(buffer.get(3), 5)
    assert(buffer.get(4), 6)

    buffer.append(7)
    assert(buffer.get(0), 3)
  }

  test("CircularArray_PopFront") {
    with on[MissingValue].default { assertTrue(false, "missing value") }
    with on[OutOfBounds].report

    val buffer = circular_array[Int](5)
    buffer.append(1)
    buffer.append(2)
    buffer.append(3)
    buffer.append(4)
    buffer.append(5)
    buffer.append(6)
    buffer.append(7)

    assert(buffer.popFront().value, 3)
    assert(buffer.elementCount.get(), 4)
    assert(buffer.popFront().value, 4)
    assert(buffer.elementCount.get(), 3)
    assert(buffer.popFront().value, 5)
    assert(buffer.elementCount.get(), 2)
    assert(buffer.popFront().value, 6)
    assert(buffer.elementCount.get(), 1)
    assert(buffer.popFront().value, 7)
    assert(buffer.elementCount.get(), 0)
    assertFalse(buffer.popFront().isDefined)
    assert(buffer.elementCount.get(), 0)
  }

  test("Find_Longest_Match") {
    with on[OutOfBounds].report
    val searchBuffer = circular_array[Byte](7)
    searchBuffer.append('c'.toInt.toByte)
    searchBuffer.append('a'.toInt.toByte)
    searchBuffer.append('a'.toInt.toByte)
    searchBuffer.append('a'.toInt.toByte)
    searchBuffer.append('a'.toInt.toByte)
    searchBuffer.append('a'.toInt.toByte)
    searchBuffer.append('g'.toInt.toByte)

    val lookAheadBuffer = circular_array[Byte](5)
    lookAheadBuffer.append('a'.toInt.toByte)
    lookAheadBuffer.append('a'.toInt.toByte)
    lookAheadBuffer.append('a'.toInt.toByte)
    lookAheadBuffer.append('b'.toInt.toByte)

    val (offset, length) = find_longest_match('a'.toInt.toByte, searchBuffer, lookAheadBuffer)
    assert(offset, 6)
    assert(length, 4)
  }
}
